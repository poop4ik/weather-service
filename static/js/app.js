// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let currentCity = '';
let currentLat = null;
let currentLon = null;
let temperatureChart = null;
const API_KEY = '6951b848da7d2bc129c4a520d8c1e275'; // –í–∞—à API –∫–ª—é—á

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    loadSavedCities();
    loadTheme();
    
    // –û–±—Ä–æ–±–∫–∞ Enter –≤ –ø–æ–ª—ñ –ø–æ—à—É–∫—É
    document.getElementById('cityInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            searchWeather();
        }
    });
});

// –ü–æ—à—É–∫ –ø–æ–≥–æ–¥–∏
async function searchWeather() {
    const city = document.getElementById('cityInput').value.trim();
    
    if (!city) {
        showError('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞');
        return;
    }

    currentCity = city;
    await loadAllWeatherData(city);
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É
async function loadAllWeatherData(city) {
    showLoading(true);
    hideError();
    hideWeatherContent();

    try {
        // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        const [weatherData, hourlyData, dailyData] = await Promise.all([
            fetchWeather(city),
            fetchHourlyForecast(city),
            fetchDailyForecast(city)
        ]);

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è
        if (weatherData.lat && weatherData.lon) {
            currentLat = weatherData.lat;
            currentLon = weatherData.lon;
            const airQuality = await fetchAirQuality(currentLat, currentLon);
            displayAirQuality(airQuality);
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        displayCurrentWeather(weatherData);
        displayHourlyForecast(hourlyData);
        displayDailyForecast(dailyData);
        createTemperatureChart(hourlyData.hourly);

        showWeatherContent();
    } catch (error) {
        showError(error.message);
    } finally {
        showLoading(false);
    }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
async function fetchWeather(city) {
    const response = await fetch(`/api/weather?city=${encodeURIComponent(city)}`);
    
    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö');
    }
    
    return await response.json();
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
async function fetchHourlyForecast(city) {
    const response = await fetch(`/api/hourly-forecast?city=${encodeURIComponent(city)}`);
    
    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É');
    }
    
    return await response.json();
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
async function fetchDailyForecast(city) {
    const response = await fetch(`/api/daily-forecast?city=${encodeURIComponent(city)}`);
    
    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É');
    }
    
    return await response.json();
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è
async function fetchAirQuality(lat, lon) {
    const response = await fetch(`/api/air-quality?lat=${lat}&lon=${lon}`);
    
    if (!response.ok) {
        return null;
    }
    
    return await response.json();
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
function displayCurrentWeather(data) {
    document.getElementById('location').textContent = `${data.city}, ${data.country}`;
    document.getElementById('temperatureMain').textContent = `${data.temperature}¬∞C`;
    document.getElementById('weatherDesc').textContent = data.description;
    document.getElementById('feelsLike').textContent = `${data.feels_like}¬∞C`;
    document.getElementById('humidity').textContent = `${data.humidity}%`;
    document.getElementById('pressure').textContent = `${data.pressure} hPa`;
    document.getElementById('windSpeed').textContent = `${data.wind_speed} –º/—Å`;
    
    const iconUrl = `https://openweathermap.org/img/wn/${data.icon}@4x.png`;
    document.getElementById('weatherIconLarge').src = iconUrl;
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
function displayHourlyForecast(data) {
    const container = document.getElementById('hourlyForecast');
    container.innerHTML = '';

    data.hourly.slice(0, 8).forEach(item => {
        const time = new Date(item.time).toLocaleString('uk-UA', {
            day: 'numeric',
            month: 'short',
            hour: '2-digit',
            minute: '2-digit'
        });

        const itemDiv = document.createElement('div');
        itemDiv.className = 'forecast-item fade-in';
        itemDiv.innerHTML = `
            <div class="forecast-time">${time}</div>
            <img class="forecast-icon" src="https://openweathermap.org/img/wn/${item.icon}@2x.png" alt="${item.description}">
            <div class="forecast-details">
                <div class="forecast-detail">
                    <span>üå°Ô∏è</span>
                    <span>${item.temperature}¬∞C</span>
                </div>
                <div class="forecast-detail">
                    <span>üíß</span>
                    <span>${item.humidity}%</span>
                </div>
                <div class="forecast-detail">
                    <span>üí®</span>
                    <span>${item.wind_speed} –º/—Å</span>
                </div>
                <div class="forecast-detail">
                    <span>‚òî</span>
                    <span>${item.pop}%</span>
                </div>
            </div>
            <div class="forecast-temp">${item.temperature}¬∞C</div>
        `;
        
        container.appendChild(itemDiv);
    });
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
function displayDailyForecast(data) {
    const container = document.getElementById('dailyForecast');
    container.innerHTML = '';

    data.daily.forEach(item => {
        const date = new Date(item.date).toLocaleDateString('uk-UA', {
            weekday: 'long',
            day: 'numeric',
            month: 'long'
        });

        const itemDiv = document.createElement('div');
        itemDiv.className = 'forecast-item fade-in';
        itemDiv.innerHTML = `
            <div class="forecast-time">${date}</div>
            <img class="forecast-icon" src="https://openweathermap.org/img/wn/${item.icon}@2x.png" alt="${item.description}">
            <div class="forecast-details">
                <div class="forecast-detail" style="text-transform: capitalize;">
                    ${item.description}
                </div>
                <div class="forecast-detail">
                    <span>üíß</span>
                    <span>${item.humidity}%</span>
                </div>
                <div class="forecast-detail">
                    <span>üí®</span>
                    <span>${item.wind_speed} –º/—Å</span>
                </div>
                <div class="forecast-detail">
                    <span>‚òî</span>
                    <span>${item.pop}%</span>
                </div>
            </div>
            <div class="forecast-temp">
                <span style="color: #ff6b6b;">${item.temp_max}¬∞</span> / 
                <span style="color: #4dabf7;">${item.temp_min}¬∞</span>
            </div>
        `;
        
        container.appendChild(itemDiv);
    });
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è
function displayAirQuality(data) {
    if (!data) return;

    const aqiCircle = document.getElementById('aqiCircle');
    const aqiLabel = document.getElementById('aqiLabel');
    const pollutantsContainer = document.getElementById('pollutants');

    aqiCircle.textContent = data.aqi;
    aqiLabel.textContent = data.aqi_label;

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É
    const aqiClasses = ['aqi-good', 'aqi-fair', 'aqi-moderate', 'aqi-poor', 'aqi-verypoor'];
    aqiCircle.className = 'aqi-circle ' + aqiClasses[data.aqi - 1];

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–±—Ä—É–¥–Ω—é–≤–∞—á—ñ–≤
    pollutantsContainer.innerHTML = `
        <div class="pollutant-item">
            <div class="pollutant-value">${data.components.pm2_5}</div>
            <div class="pollutant-label">PM2.5</div>
        </div>
        <div class="pollutant-item">
            <div class="pollutant-value">${data.components.pm10}</div>
            <div class="pollutant-label">PM10</div>
        </div>
        <div class="pollutant-item">
            <div class="pollutant-value">${data.components.no2}</div>
            <div class="pollutant-label">NO‚ÇÇ</div>
        </div>
        <div class="pollutant-item">
            <div class="pollutant-value">${data.components.o3}</div>
            <div class="pollutant-label">O‚ÇÉ</div>
        </div>
        <div class="pollutant-item">
            <div class="pollutant-value">${data.components.co}</div>
            <div class="pollutant-label">CO</div>
        </div>
    `;
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
function createTemperatureChart(hourlyData) {
    const ctx = document.getElementById('temperatureChart').getContext('2d');

    if (temperatureChart) {
        temperatureChart.destroy();
    }

    const labels = hourlyData.map(item => {
        const date = new Date(item.time);
        return date.toLocaleString('uk-UA', { day: 'numeric', month: 'short', hour: '2-digit' });
    });

    const temperatures = hourlyData.map(item => item.temperature);
    const feelsLike = hourlyData.map(item => item.feels_like);

    temperatureChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                {
                    label: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    data: temperatures,
                    borderColor: '#667eea',
                    backgroundColor: 'rgba(102, 126, 234, 0.1)',
                    tension: 0.4,
                    fill: true
                },
                {
                    label: '–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫',
                    data: feelsLike,
                    borderColor: '#764ba2',
                    backgroundColor: 'rgba(118, 75, 162, 0.1)',
                    tension: 0.4,
                    fill: true,
                    borderDash: [5, 5]
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'top'
                },
                tooltip: {
                    mode: 'index',
                    intersect: false
                }
            },
            scales: {
                y: {
                    beginAtZero: false,
                    ticks: {
                        callback: function(value) {
                            return value + '¬∞C';
                        }
                    }
                }
            }
        }
    });
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
function saveCity() {
    if (!currentCity) return;

    let savedCities = JSON.parse(localStorage.getItem('savedCities') || '[]');
    
    if (!savedCities.includes(currentCity)) {
        savedCities.unshift(currentCity);
        savedCities = savedCities.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –º—ñ—Å—Ç
        localStorage.setItem('savedCities', JSON.stringify(savedCities));
        loadSavedCities();
        showError('–ú—ñ—Å—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');
        setTimeout(hideError, 2000);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –º—ñ—Å—Ç
function loadSavedCities() {
    const savedCities = JSON.parse(localStorage.getItem('savedCities') || '[]');
    const container = document.getElementById('savedCities');

    if (savedCities.length === 0) {
        container.classList.add('hidden');
        return;
    }

    container.classList.remove('hidden');
    container.innerHTML = '<div style="margin-bottom: 10px; color: #666; font-weight: 600;">–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –º—ñ—Å—Ç–∞:</div>';

    savedCities.forEach(city => {
        const chip = document.createElement('div');
        chip.className = 'city-chip';
        chip.innerHTML = `
            <span onclick="loadCityWeather('${city}')" style="cursor: pointer;">${city}</span>
            <button class="remove-city" onclick="removeCity('${city}')" title="–í–∏–¥–∞–ª–∏—Ç–∏">‚úï</button>
        `;
        container.appendChild(chip);
    });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
function loadCityWeather(city) {
    document.getElementById('cityInput').value = city;
    searchWeather();
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∞
function removeCity(city) {
    let savedCities = JSON.parse(localStorage.getItem('savedCities') || '[]');
    savedCities = savedCities.filter(c => c !== city);
    localStorage.setItem('savedCities', JSON.stringify(savedCities));
    loadSavedCities();
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
function getCurrentLocation() {
    if (!navigator.geolocation) {
        showError('–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
        return;
    }

    showLoading(true);
    
    navigator.geolocation.getCurrentPosition(
        async (position) => {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;
            
            try {
                // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞ –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                const response = await fetch(`https://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lon}&limit=1&appid=${API_KEY}`);
                const data = await response.json();
                
                if (data && data.length > 0) {
                    const city = data[0].name;
                    document.getElementById('cityInput').value = city;
                    await loadAllWeatherData(city);
                }
            } catch (error) {
                showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ');
            } finally {
                showLoading(false);
            }
        },
        (error) => {
            showLoading(false);
            showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è');
        }
    );
}

// –ó–º—ñ–Ω–∞ —Ç–µ–º–∏
function toggleTheme() {
    const body = document.body;
    const themeIcon = document.getElementById('themeIcon');
    
    body.classList.toggle('dark-mode');
    
    if (body.classList.contains('dark-mode')) {
        themeIcon.textContent = '‚òÄÔ∏è';
        localStorage.setItem('theme', 'dark');
    } else {
        themeIcon.textContent = 'üåô';
        localStorage.setItem('theme', 'light');
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–º–∏
function loadTheme() {
    const theme = localStorage.getItem('theme');
    const themeIcon = document.getElementById('themeIcon');
    
    if (theme === 'dark') {
        document.body.classList.add('dark-mode');
        themeIcon.textContent = '‚òÄÔ∏è';
    }
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó UI
function showLoading(show) {
    document.getElementById('loading').classList.toggle('hidden', !show);
}

function showError(message, type = 'error') {
    const errorDiv = document.getElementById('error');
    const errorText = document.getElementById('errorText');
    
    errorText.textContent = message;
    errorDiv.classList.remove('hidden');
    
    if (type === 'success') {
        errorDiv.style.background = '#51cf66';
    } else {
        errorDiv.style.background = '#ff6b6b';
    }
}

function hideError() {
    document.getElementById('error').classList.add('hidden');
}

function showWeatherContent() {
    document.getElementById('weatherContent').classList.remove('hidden');
}

function hideWeatherContent() {
    document.getElementById('weatherContent').classList.add('hidden');
}
